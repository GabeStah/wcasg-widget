// import { Plugins } from '@/state';
import Utility from '@/utility';
import { PluginActionFunction } from 'classes/plugin/action/function';
import { IPluginElement } from 'classes/plugin/element';
import { PluginElementToggleable } from 'classes/plugin/element/toggleable';
import config, { TextToSpeechEngine } from 'config';
import React from 'react';
import { useCallback } from 'react';
import { useDispatch } from 'react-redux';
import styles from 'styles/plugin/element.scss';

const checkBrowserCompatibility = (
  action: PluginActionFunction,
  element: IPluginElement
) => {
  if (
    // config.textToSpeechEngine === TextToSpeechEngine.Browser &&
    // window.speechSynthesis
    true
  ) {
    const dispatch = useDispatch();

    console.log(`checking browser compat`);

    element.disabled = true;

    dispatch({
      type: 'error',
      payload: {
        id: element.id,
        error: 'Your browser does not support text-to-speech synthesis.'
      }
    });
    // element.error = 'Your browser does not support text-to-speech synthesis.';
    // if (parentElement) {
    //   console.log(parentElement);
    //   parentElement.enabled = false;
    //   // Overwrite template with error
    //   parentElement.template = (element: any) => {
    //     return (
    //       <div
    //         className={`${styles['plugin-element']} ${styles['plugin-element-custom']}`}
    //       >
    //         <h3>{element.title}</h3>
    //         <p>Your browser does not support text-to-speech synthesis.</p>
    //       </div>
    //     );
    //   };
    // }
  }
};

/**
 * Text-to-speech plugin.
 *
 * @see https://cloud.google.com/text-to-speech/pricing#pricing_table
 * @see https://cloud.google.com/text-to-speech/docs/quickstart-client-libraries?authuser=4
 * @type {PluginElementToggleable}
 */
export const pluginTextToSpeech = new PluginElementToggleable({
  id: 'plugin-text-to-speech',
  title: 'Text-to-Speech',
  enabled: false,
  actions: [
    new PluginActionFunction({
      name: 'text-to-speech-action',
      data: {
        focusedNodeIndex: undefined
      },
      initialize: (self: PluginActionFunction) => {
        // Check for browser compatibility
        // const checkBrowserCompatibility = (
        //   action: PluginActionFunction,
        //   element: IPluginElement
        // ) => {
        //   if (
        //     // config.textToSpeechEngine === TextToSpeechEngine.Browser &&
        //     // window.speechSynthesis
        //     true
        //   ) {
        //     const dispatch = useDispatch();
        //
        //     console.log(`checking browser compat`);
        //
        //     element.disabled = true;
        //
        //     dispatch({
        //       type: 'error',
        //       payload: {
        //         id: element.id,
        //         error: 'Your browser does not support text-to-speech synthesis.'
        //       }
        //     });
        //     // element.error = 'Your browser does not support text-to-speech synthesis.';
        //     // if (parentElement) {
        //     //   console.log(parentElement);
        //     //   parentElement.enabled = false;
        //     //   // Overwrite template with error
        //     //   parentElement.template = (element: any) => {
        //     //     return (
        //     //       <div
        //     //         className={`${styles['plugin-element']} ${styles['plugin-element-custom']}`}
        //     //       >
        //     //         <h3>{element.title}</h3>
        //     //         <p>Your browser does not support text-to-speech synthesis.</p>
        //     //       </div>
        //     //     );
        //     //   };
        //     // }
        //   }
        // };
        //
        // // noinspection BadExpressionStatementJS tslint:disable-next-line:no-unused-expression
        // checkBrowserCompatibility(self, pluginTextToSpeech);
        // Add event listener one time.
        // document.addEventListener('keydown', e =>
        //   handleKeyDown(e, self, pluginKeyboardNavigation)
        // );
      },
      funcOnDisable: [
        (self: PluginActionFunction) => {
          // Remove active focus
          Utility.Aria.blurNode({
            node: self.nodeList[self.data.focusedNodeIndex]
          });
          self.data.focusedNodeIndex = undefined;
        }
      ]

      // query: ['asdasdasd'].join(', ')
    })
  ]
});
